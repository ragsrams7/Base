/*

 *  Base controlller for Web API endpoints.
 * 
*/

using System;
using System.Collections.Generic;
using System.Linq.Expressions;
using System.Net;
using System.Web.Http;
using System.Net.Http;
using Microsoft.Practices.ServiceLocation;
using M.B.Common;
using M.B.Common.Infrastructure.Contracts;

namespace B.L.Common.Web.Controllers
{
    public class ApiControllerBase : ApiController
    {
        protected ILoggingService LoggingSvc
        {
            get
            {
                return ServiceLocator.Current.GetInstance<ILoggingService>();
            }
        }

        #region App Service Invocation functions
        
        /// <summary>
        /// Adaptor function for invoking the Application Service layer and populating the error messages
        /// </summary>
        /// <typeparam name="TAppService"></typeparam>
        /// <typeparam name="TResult"></typeparam>
        /// <param name="appServiceExpression"></param>
        /// <returns></returns>
        protected TResult InvokeDomainService<TAppService, TResult>(Expression<Func<TAppService, IList<BApplicationMessage>, TResult>> appServiceExpression)
        {
            TResult result = default(TResult);
            IList<BApplicationMessage> messages = new List<BApplicationMessage>();
            
            try
            {
                var appService = ServiceLocator.Current.GetInstance<TAppService>();
                result = appServiceExpression.Compile().Invoke(appService, messages);
            }
            catch (BApplicationException ex)
            {
                messages.Add(ex);
            }
            catch (Exception ex)
            {
                messages.Add(ex);
                LoggingSvc.Log(ex, category: Category.Web);
            }
            finally
            {
                if (messages.Count > 0)
                {
                    throw new HttpResponseException(new HttpResponseMessage(HttpStatusCode.InternalServerError)
                    {
                        Content = new StringContent(string.Join(", ", messages)),
                        ReasonPhrase = @"Internal Server Error"
                    });
                }
            }
            return result;
        }
        
        /// <summary>
        /// Adaptor function with 2 app service type definition parameters 
        ///  for invoking the Application Service layer and populating the error messages
        /// </summary>
        /// <typeparam name="TAppService1"></typeparam>
        /// <typeparam name="TAppService2"></typeparam>
        /// <typeparam name="TResult"></typeparam>
        /// <param name="appServiceExpression"></param>
        /// <returns></returns>
        protected TResult InvokeDomainService<TAppService1, TAppService2, TResult>(Expression<Func<TAppService1, TAppService2, IList<BApplicationMessage>, TResult>> appServiceExpression)
        {
            TResult result = default(TResult);
            IList<BApplicationMessage> messages = new List<BApplicationMessage>();
            
            try
            {
                var appService1 = ServiceLocator.Current.GetInstance<TAppService1>();
                var appService2 = ServiceLocator.Current.GetInstance<TAppService2>();
                result = appServiceExpression.Compile().Invoke(appService1, appService2, messages);
            }
            catch (BApplicationException ex)
            {
                messages.Add(ex);
            }
            catch (Exception ex)
            {
                messages.Add(ex);
                LoggingSvc.Log(ex, category: Category.Web);
            }
            finally
            {
                if (messages.Count > 0)
                {
                    throw new HttpResponseException(new HttpResponseMessage(HttpStatusCode.InternalServerError)
                    {
                        Content = new StringContent(string.Join(", ", messages)),
                        ReasonPhrase = @"Internal Server Error"
                    });
                }
            }
            
            return result;
        }
        
        /// <summary>
        /// Adaptor function with 3 app service type definition parameters
        ///  for invoking the Application Service layer and populating the error messages
        /// </summary>
        /// <typeparam name="TAppService1"></typeparam>
        /// <typeparam name="TAppService2"></typeparam>
        /// <typeparam name="TAppService3"></typeparam>
        /// <typeparam name="TResult"></typeparam>
        /// <param name="appServiceExpression"></param>
        /// <returns></returns>
        protected TResult InvokeDomainService<TAppService1, TAppService2, TAppService3, TResult>(Expression<Func<TAppService1, TAppService2, TAppService3, IList<BtmuApplicationMessage>, TResult>> appServiceExpression)
        {
            TResult result = default(TResult);
            IList<BApplicationMessage> messages = new List<BApplicationMessage>();
            
            try
            {
                var appService1 = ServiceLocator.Current.GetInstance<TAppService1>();
                var appService2 = ServiceLocator.Current.GetInstance<TAppService2>();
                var appService3 = ServiceLocator.Current.GetInstance<TAppService3>();
                result = appServiceExpression.Compile().Invoke(appService1, appService2, appService3, messages);
            }
            catch (BApplicationException ex)
            {
                messages.Add(ex);
            }
            catch (Exception ex)
            {
                messages.Add(ex);
                LoggingSvc.Log(ex, category: Category.Web);
            }
            finally
            {
                if (messages.Count > 0)
                {
                    throw new HttpResponseException(new HttpResponseMessage(HttpStatusCode.InternalServerError)
                    {
                        Content = new StringContent(string.Join(", ", messages)),
                        ReasonPhrase = @"Internal Server Error"
                    });
                }

            }
            
            return result;
        }
        
        /// <summary>
        /// Adaptor function (action with no return value) for invoking the Application Service layer and populating the error messages
        /// </summary>
        /// <typeparam name="TAppService"></typeparam>
        /// <typeparam name="TResult"></typeparam>
        /// <param name="appServiceExpression"></param>
        protected void InvokeDomainService<TAppService, TResult>(Expression<Action<TAppService, IList<BApplicationMessage>>> appServiceExpression)
        {
            IList<BApplicationMessage> messages = new List<BApplicationMessage>();
            
            try
            {
                var appService = ServiceLocator.Current.GetInstance<TAppService>();
                appServiceExpression.Compile().Invoke(appService, messages);
            }
            catch (BApplicationException ex)
            {
                messages.Add(ex);
            }
            catch (Exception ex)
            {
                messages.Add(ex);
                LoggingSvc.Log(ex, category: Category.Web);
            }
            finally
            {
                if (messages.Count > 0)
                {
                    throw new HttpResponseException(new HttpResponseMessage(HttpStatusCode.InternalServerError)
                    {
                        Content = new StringContent(string.Join(", ", messages)),
                        ReasonPhrase = @"Internal Server Error"
                    });
                }

            }
        }
        
        /// <summary>
        /// Adaptor function (action with no return value) with 2 app service type parameter
        ///  for invoking the Application Service layer and populating the error messages
        /// </summary>
        /// <typeparam name="TAppService1"></typeparam>
        /// <typeparam name="TAppService2"></typeparam>
        /// <typeparam name="TResult"></typeparam>
        /// <param name="appServiceExpression"></param>
        protected void InvokeDomainService<TAppService1, TAppService2, TResult>(Expression<Action<TAppService1, TAppService2, IList<BApplicationMessage>>> appServiceExpression)
        {
            IList<BApplicationMessage> messages = new List<BApplicationMessage>();
            
            try
            {
                var appService1 = ServiceLocator.Current.GetInstance<TAppService1>();
                var appService2 = ServiceLocator.Current.GetInstance<TAppService2>();
                appServiceExpression.Compile().Invoke(appService1, appService2, messages);
            }
            catch (BApplicationException ex)
            {
                messages.Add(ex);
            }
            catch (Exception ex)
            {
                messages.Add(ex);
                LoggingSvc.Log(ex, category: Category.Web);
            }
            finally
            {
                if (messages.Count > 0)
                {
                    throw new HttpResponseException(new HttpResponseMessage(HttpStatusCode.InternalServerError)
                    {
                        Content = new StringContent(string.Join(", ", messages)),
                        ReasonPhrase = @"Internal Server Error"
                    });
                }

            }
        }
        
        /// <summary>
        /// Adaptor function (action with no return value) with 3 app service type parameter
        ///  for invoking the Application Service layer and populating the error messages
        /// </summary>
        /// <typeparam name="TAppService1"></typeparam>
        /// <typeparam name="TAppService2"></typeparam>
        /// <typeparam name="TAppService3"></typeparam>
        /// <param name="appServiceExpression"></param>
        protected void InvokeDomainService<TAppService1, TAppService2, TAppService3>(Expression<Action<TAppService1, TAppService2, TAppService3, IList<BtmuApplicationMessage>>> appServiceExpression)
        {
            IList<BApplicationMessage> messages = new List<BApplicationMessage>();
            
            try
            {
                var appService1 = ServiceLocator.Current.GetInstance<TAppService1>();
                var appService2 = ServiceLocator.Current.GetInstance<TAppService2>();
                var appService3 = ServiceLocator.Current.GetInstance<TAppService3>();
                appServiceExpression.Compile().Invoke(appService1, appService2, appService3, messages);
            }
            catch (BApplicationException ex)
            {
                messages.Add(ex);
            }
            catch (Exception ex)
            {
                messages.Add(ex);
                LoggingSvc.Log(ex, category: Category.Web);
            }
            finally
            {
                if (messages.Count > 0)
                {
                    throw new HttpResponseException(new HttpResponseMessage(HttpStatusCode.InternalServerError)
                    {
                        Content = new StringContent(string.Join(", ", messages)),
                        ReasonPhrase = @"Internal Server Error"
                    });
                }

            }
        }
    
        #endregion

    }
}
